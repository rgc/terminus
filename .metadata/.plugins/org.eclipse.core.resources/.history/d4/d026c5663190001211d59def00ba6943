package akkaserver;

//import edu.buffalo.cse.terminus.lowlevel.LowLevelMessageFactory;
//import edu.buffalo.cse.terminus.messages.ITerminusMessageFactory;
//import edu.buffalo.cse.terminus.messages.RegistrationResponse;
//import edu.buffalo.cse.terminus.messages.TerminusMessage;

import akka.actor.UntypedActor;
import akka.actor.ActorRef;

import eventserver.IEventCallbacks;

import java.util.*;

public class AkkaServerListener extends UntypedActor {
 
  private final Map<String, ActorRef> sessions = new HashMap<String, ActorRef>();
  private IEventCallbacks callback;
  
  public void onReceive(Object message) throws Exception {
    if(message instanceof String) {
      final String string = (String) message;
      System.out.println("Received String: \""+string+"\"");
    } else if(message instanceof IEventCallbacks) {
    	this.callback = (IEventCallbacks)message;
    }
/*
    } else if(message instanceof RegisterMessage) {
	registerClient((RegisterMessage)message, getSender());

    } else if(message instanceof EventMovementDetected) {
	movementDetected((EventMovementDetected)message, getSender());
*/
    } else {
	System.out.println("bad message");
    }
  }
/*
  private void registerClient(RegisterMessage message, ActorRef client) {
	String id = message.getId();
      	
	sessions.put(id, client);

	System.out.println("Registration from ID: " + id);
	
	OptionsMessage m = new OptionsMessage(id);
	client.tell(m, getSelf());

  }

  private void movementDetected(EventMovementDetected message, ActorRef client) {
	System.out.println("Movement Detected");
  }
*/  
}
