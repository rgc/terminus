package akkaserver;

import java.net.*;
import java.io.*;

import eventserver.IEventCallbacks;

import shared.ITerminusServer;
import shared.ServerCloseException;

import com.typesafe.config.ConfigFactory;

import akka.actor.ActorSystem;
import akka.actor.Actor;
import akka.actor.Props;
import akka.actor.ActorRef;

public class AkkaServer implements ITerminusServer
{
	private int acceptPort;
	private ServerSocket server = null;
	private IEventCallbacks callback;
	
	final ActorSystem system = ActorSystem.create("TerminusServer", ConfigFactory.load().getConfig("TerminusServer"));

	public AkkaServer(IEventCallbacks c, int port)
	{
		this.callback = c;
		this.acceptPort = port;
	}

	@Override
	public void start() throws ServerCloseException
	{
		if (this.server != null && !this.server.isClosed())
		{
			stop();
		}

		try
		{
			server = new ServerSocket(this.acceptPort);
		}
		catch (IOException e)
		{
			throw new ServerCloseException(e.getMessage());
		}

	}

	@Override
	public void stop()
	{
		try
		{
			server.close();
		}
		catch (IOException e)
		{
			// Just supress this, we're shutting down anyways.
		}
	}
}
